Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> local_declaration
Rule 2     statement -> assignment
Rule 3     local_declaration -> LOCAL var_list
Rule 4     local_declaration -> LOCAL var_list EQUAL exp_list
Rule 5     assignment -> var_list EQUAL exp_list
Rule 6     var_list -> ID
Rule 7     var_list -> ID COMMA var_list
Rule 8     exp_list -> expression
Rule 9     exp_list -> expression COMMA exp_list
Rule 10    expression -> ID
Rule 11    expression -> NUMBER

Terminals, with rules where they appear

COMMA                : 7 9
EQUAL                : 4 5
ID                   : 6 7 10
LOCAL                : 3 4
NUMBER               : 11
error                : 

Nonterminals, with rules where they appear

assignment           : 2
exp_list             : 4 5 9
expression           : 8 9
local_declaration    : 1
statement            : 0
var_list             : 3 4 5 7

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . local_declaration
    (2) statement -> . assignment
    (3) local_declaration -> . LOCAL var_list
    (4) local_declaration -> . LOCAL var_list EQUAL exp_list
    (5) assignment -> . var_list EQUAL exp_list
    (6) var_list -> . ID
    (7) var_list -> . ID COMMA var_list

    LOCAL           shift and go to state 4
    ID              shift and go to state 6

    statement                      shift and go to state 1
    local_declaration              shift and go to state 2
    assignment                     shift and go to state 3
    var_list                       shift and go to state 5

state 1

    (0) S' -> statement .



state 2

    (1) statement -> local_declaration .

    $end            reduce using rule 1 (statement -> local_declaration .)


state 3

    (2) statement -> assignment .

    $end            reduce using rule 2 (statement -> assignment .)


state 4

    (3) local_declaration -> LOCAL . var_list
    (4) local_declaration -> LOCAL . var_list EQUAL exp_list
    (6) var_list -> . ID
    (7) var_list -> . ID COMMA var_list

    ID              shift and go to state 6

    var_list                       shift and go to state 7

state 5

    (5) assignment -> var_list . EQUAL exp_list

    EQUAL           shift and go to state 8


state 6

    (6) var_list -> ID .
    (7) var_list -> ID . COMMA var_list

    EQUAL           reduce using rule 6 (var_list -> ID .)
    $end            reduce using rule 6 (var_list -> ID .)
    COMMA           shift and go to state 9


state 7

    (3) local_declaration -> LOCAL var_list .
    (4) local_declaration -> LOCAL var_list . EQUAL exp_list

    $end            reduce using rule 3 (local_declaration -> LOCAL var_list .)
    EQUAL           shift and go to state 10


state 8

    (5) assignment -> var_list EQUAL . exp_list
    (8) exp_list -> . expression
    (9) exp_list -> . expression COMMA exp_list
    (10) expression -> . ID
    (11) expression -> . NUMBER

    ID              shift and go to state 13
    NUMBER          shift and go to state 14

    exp_list                       shift and go to state 11
    expression                     shift and go to state 12

state 9

    (7) var_list -> ID COMMA . var_list
    (6) var_list -> . ID
    (7) var_list -> . ID COMMA var_list

    ID              shift and go to state 6

    var_list                       shift and go to state 15

state 10

    (4) local_declaration -> LOCAL var_list EQUAL . exp_list
    (8) exp_list -> . expression
    (9) exp_list -> . expression COMMA exp_list
    (10) expression -> . ID
    (11) expression -> . NUMBER

    ID              shift and go to state 13
    NUMBER          shift and go to state 14

    exp_list                       shift and go to state 16
    expression                     shift and go to state 12

state 11

    (5) assignment -> var_list EQUAL exp_list .

    $end            reduce using rule 5 (assignment -> var_list EQUAL exp_list .)


state 12

    (8) exp_list -> expression .
    (9) exp_list -> expression . COMMA exp_list

    $end            reduce using rule 8 (exp_list -> expression .)
    COMMA           shift and go to state 17


state 13

    (10) expression -> ID .

    COMMA           reduce using rule 10 (expression -> ID .)
    $end            reduce using rule 10 (expression -> ID .)


state 14

    (11) expression -> NUMBER .

    COMMA           reduce using rule 11 (expression -> NUMBER .)
    $end            reduce using rule 11 (expression -> NUMBER .)


state 15

    (7) var_list -> ID COMMA var_list .

    EQUAL           reduce using rule 7 (var_list -> ID COMMA var_list .)
    $end            reduce using rule 7 (var_list -> ID COMMA var_list .)


state 16

    (4) local_declaration -> LOCAL var_list EQUAL exp_list .

    $end            reduce using rule 4 (local_declaration -> LOCAL var_list EQUAL exp_list .)


state 17

    (9) exp_list -> expression COMMA . exp_list
    (8) exp_list -> . expression
    (9) exp_list -> . expression COMMA exp_list
    (10) expression -> . ID
    (11) expression -> . NUMBER

    ID              shift and go to state 13
    NUMBER          shift and go to state 14

    expression                     shift and go to state 12
    exp_list                       shift and go to state 18

state 18

    (9) exp_list -> expression COMMA exp_list .

    $end            reduce using rule 9 (exp_list -> expression COMMA exp_list .)

